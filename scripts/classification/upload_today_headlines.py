#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Ïò§ÎäòÏùò Ìó§ÎìúÎùºÏù∏ - Notion ÏóÖÎ°úÎìú

ÏßÄÎ©¥Ïã†Î¨∏ 1Î©¥ Ìó§ÎìúÎùºÏù∏Îßå ÏàòÏßëÌïòÏó¨ Ïñ∏Î°†ÏÇ¨Î≥ÑÎ°ú ÌëúÏãú
(Î∂ÄÎèôÏÇ∞ Îâ¥Ïä§ API Í≤ÄÏÉâÍ≥ºÎäî Î≥ÑÎèÑÎ°ú ÏßÑÌñâ)
"""
import sys
import os
import requests
from pathlib import Path
from datetime import datetime, date, timedelta

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "aide-data-core"))

from dotenv import load_dotenv
load_dotenv()

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from aide_data_core.models.paper_headlines import PaperHeadline

# Notion ÏÑ§Ï†ï
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
NOTION_API_VERSION = "2022-06-28"
TODAY_HEADLINES_PAGE_ID = os.getenv("NOTION_PAGE_TODAY_HEADLINES", "28c18b63af4d8031afc6ed04b3d056c3")

# Ïñ∏Î°†ÏÇ¨ ÏàúÏÑú (Ï¢ÖÌï©ÏßÄ ‚Üí Í≤ΩÏ†úÏßÄ)
PRESS_ORDER = [
    "Ï°∞ÏÑ†ÏùºÎ≥¥",
    "Ï§ëÏïôÏùºÎ≥¥",
    "ÎèôÏïÑÏùºÎ≥¥",
    "ÌïúÍ≤®Î†à",
    "Í≤ΩÌñ•Ïã†Î¨∏",
    "Îß§ÏùºÍ≤ΩÏ†ú",
    "ÌïúÍµ≠Í≤ΩÏ†ú",
    "Î®∏ÎãàÌà¨Îç∞Ïù¥",
    "ÌååÏù¥ÎÇ∏ÏÖúÎâ¥Ïä§"
]


def get_notion_headers():
    """Notion API Ìó§Îçî"""
    return {
        "Authorization": f"Bearer {NOTION_API_KEY}",
        "Content-Type": "application/json",
        "Notion-Version": NOTION_API_VERSION
    }


def delete_blocks_from_page(page_id: str, start_index: int = 2):
    """ÌéòÏù¥ÏßÄÏùò ÌäπÏ†ï Ïù∏Îç±Ïä§Î∂ÄÌÑ∞ Î∏îÎ°ù ÏÇ≠Ï†ú"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    response = requests.get(url, headers=get_notion_headers(), timeout=30)

    if response.status_code != 200:
        return False

    blocks = response.json().get("results", [])
    blocks_to_delete = blocks[start_index:]

    for block in blocks_to_delete:
        delete_url = f"https://api.notion.com/v1/blocks/{block['id']}"
        requests.delete(delete_url, headers=get_notion_headers(), timeout=30)

    return True


def append_blocks_to_page(page_id: str, blocks: list):
    """ÌéòÏù¥ÏßÄÏóê Î∏îÎ°ù Ï∂îÍ∞Ä"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    response = requests.patch(
        url,
        headers=get_notion_headers(),
        json={"children": blocks},
        timeout=30
    )
    return response.status_code == 200


def create_empty_block():
    """Îπà Î∏îÎ°ù ÏÉùÏÑ±"""
    return {
        "object": "block",
        "type": "paragraph",
        "paragraph": {"rich_text": [{"type": "text", "text": {"content": ""}}]}
    }


def create_footer_blocks(logo_url: str = None):
    """Ìë∏ÌÑ∞ Î∏îÎ°ù ÏÉùÏÑ±"""
    blocks = []

    # 4Í∞úÏùò Îπà Ï§Ñ
    for _ in range(4):
        blocks.append(create_empty_block())

    # Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ (ÏûàÏúºÎ©¥)
    if logo_url:
        blocks.append({
            "object": "block",
            "type": "image",
            "image": {
                "type": "external",
                "external": {"url": logo_url}
            }
        })

    # ÌöåÏÇ¨ Î∏åÎûúÎìú
    blocks.append({
        "object": "block",
        "type": "paragraph",
        "paragraph": {
            "rich_text": [{
                "type": "text",
                "text": {"content": "Î∂ÄÎèôÏÇ∞ ÎπÑÏ¶àÎãàÏä§ Ï†ÑÎ¨∏Í∞ÄÎ•º ÏúÑÌïú\nüü¶ AIDE INSIGHT | ÏóêÏù¥Îìú Ïù∏ÏÇ¨Ïù¥Ìä∏"},
                "annotations": {"bold": True}
            }]
        }
    })

    # ÌöåÏÇ¨ Ï†ïÎ≥¥
    blocks.append({
        "object": "block",
        "type": "paragraph",
        "paragraph": {
            "rich_text": [{
                "type": "text",
                "text": {"content": "(Ï£º)ÏóêÏù¥ÎìúÌååÌä∏ÎÑàÏä§ | ÎåÄÌëúÏù¥ÏÇ¨: ÏÜ°Ïù∏Í∑º | ÏÇ¨ÏóÖÏûêÎì±Î°ùÎ≤àÌò∏: 345-81-02007\nÏÑúÏö∏ÌäπÎ≥ÑÏãú ÏÑúÏ¥àÍµ¨ Í∞ïÎÇ®ÎåÄÎ°ú97Í∏∏ 26, 4Ï∏µ\n¬© 2025 AIDE Partners Co., Ltd. All rights reserved"}
            }]
        }
    })

    return blocks


def create_headline_blocks(date_str: str, headlines_by_press: dict):
    """
    Ìó§ÎìúÎùºÏù∏ Î∏îÎ°ù ÏÉùÏÑ± (Ïñ∏Î°†ÏÇ¨Î≥Ñ)

    Args:
        date_str: ÎÇ†Ïßú (YYYY-MM-DD)
        headlines_by_press: {Ïñ∏Î°†ÏÇ¨Î™Ö: [headline Î¶¨Ïä§Ìä∏]}
    """
    blocks = []

    # Ìó§Îçî
    dt = datetime.strptime(date_str, "%Y-%m-%d")
    heading = f"{dt.year}ÎÖÑ {dt.month}Ïõî {dt.day}Ïùº, Ïò§ÎäòÏùò Ìó§ÎìúÎùºÏù∏ÏûÖÎãàÎã§"

    blocks.append({
        "object": "block",
        "type": "paragraph",
        "paragraph": {
            "rich_text": [{
                "type": "text",
                "text": {"content": heading},
                "annotations": {"bold": True}
            }]
        }
    })

    # Íµ¨Î∂ÑÏÑ†
    blocks.append({
        "object": "block",
        "type": "divider",
        "divider": {}
    })

    # Ïñ∏Î°†ÏÇ¨Î≥Ñ Ìó§ÎìúÎùºÏù∏
    for press_name in PRESS_ORDER:
        headlines = headlines_by_press.get(press_name, [])

        if not headlines:
            continue

        # Ïñ∏Î°†ÏÇ¨Î™Ö (H3, Ïù¥Î™®ÏßÄ ÏóÜÏùå)
        blocks.append({
            "object": "block",
            "type": "heading_3",
            "heading_3": {
                "rich_text": [{
                    "type": "text",
                    "text": {"content": press_name},
                    "annotations": {"bold": True}
                }]
            }
        })

        # Ìó§ÎìúÎùºÏù∏ Î™©Î°ù (ÏµúÎåÄ 5Í∞ú)
        for idx, headline in enumerate(headlines[:5]):
            # Ï≤´ Î≤àÏß∏ Í∏∞ÏÇ¨: üìå + Î≥ºÎìú
            # ÎÇòÎ®∏ÏßÄ Í∏∞ÏÇ¨: ÏùºÎ∞ò ÌÖçÏä§Ìä∏
            if idx == 0:
                rich_text = [
                    {"type": "text", "text": {"content": "üìå "}},
                    {"type": "text", "text": {"content": f"{headline['title']} [{headline.get('source', 'Ï∂úÏ≤òÎØ∏ÏÉÅ')}, [1]+Í±¥] "}, "annotations": {"bold": True}},
                    {"type": "text", "text": {"content": "üîó", "link": {"url": headline['url']}}}
                ]
            else:
                rich_text = [
                    {"type": "text", "text": {"content": f"{headline['title']} [{headline.get('source', 'Ï∂úÏ≤òÎØ∏ÏÉÅ')}, [1]+Í±¥] "}},
                    {"type": "text", "text": {"content": "üîó", "link": {"url": headline['url']}}}
                ]

            blocks.append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {"rich_text": rich_text}
            })

        # Ïñ∏Î°†ÏÇ¨ ÏÇ¨Ïù¥ Íµ¨Î∂ÑÏÑ†
        blocks.append({
            "object": "block",
            "type": "divider",
            "divider": {}
        })

    # Ìë∏ÌÑ∞ Ï∂îÍ∞Ä
    footer_blocks = create_footer_blocks(logo_url="https://www.aidepartners.com/images/logo.png")
    blocks.extend(footer_blocks)

    return blocks


def main():
    """Î©îÏù∏ ÌîÑÎ°úÏÑ∏Ïä§"""
    print("=" * 80)
    print("Upload Today's Headlines to Notion")
    print("=" * 80)
    print(f"Date: {date.today().isoformat()}\n")

    # DB Ïó∞Í≤∞
    db_url = "sqlite:///" + str(project_root / "aide-data-core" / "aide_dev.db")
    engine = create_engine(db_url)
    Session = sessionmaker(bind=engine)
    db = Session()

    try:
        # 1. Ïò§Îäò ÎÇ†ÏßúÏùò ÏßÄÎ©¥Ïã†Î¨∏ 1Î©¥ Ìó§ÎìúÎùºÏù∏ Ï°∞Ìöå
        today = date.today()

        # Ïò§Îäò ÎòêÎäî ÏµúÍ∑º 3Ïùº Ïù¥ÎÇ¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ ÎåÄÎπÑ)
        start_date = today - timedelta(days=3)

        headlines = db.query(PaperHeadline).filter(
            PaperHeadline.date >= start_date,
            PaperHeadline.status == 'raw'
        ).order_by(PaperHeadline.date.desc(), PaperHeadline.newspaper).all()

        print(f"Found: {len(headlines)} headlines\n")

        if len(headlines) == 0:
            print("No headlines to upload.")
            db.close()
            return 0

        # 2. Ïñ∏Î°†ÏÇ¨Î≥ÑÎ°ú Í∑∏Î£πÌôî
        headlines_by_press = {}
        latest_date = None

        for headline in headlines:
            press_name = headline.newspaper

            if press_name not in headlines_by_press:
                headlines_by_press[press_name] = []

            headlines_by_press[press_name].append({
                'title': headline.title,
                'url': headline.url,
                'date': headline.date.strftime("%Y-%m-%d")
            })

            # ÏµúÏã† ÎÇ†Ïßú Ï∂îÏ†Å
            if latest_date is None or headline.date > latest_date:
                latest_date = headline.date

        # ÏµúÏã† ÎÇ†ÏßúÎßå ÏÇ¨Ïö© (Ïó¨Îü¨ ÎÇ†ÏßúÍ∞Ä ÏÑûÏó¨ÏûàÏùÑ Í≤ΩÏö∞)
        if latest_date:
            headlines_by_press_filtered = {}
            for press_name, press_headlines in headlines_by_press.items():
                filtered = [h for h in press_headlines if h['date'] == latest_date.strftime("%Y-%m-%d")]
                if filtered:
                    headlines_by_press_filtered[press_name] = filtered
            headlines_by_press = headlines_by_press_filtered
            date_str = latest_date.strftime("%Y-%m-%d")
        else:
            date_str = today.isoformat()

        # ÌÜµÍ≥Ñ Ï∂úÎ†•
        print("Headlines by Press:")
        for press_name in PRESS_ORDER:
            count = len(headlines_by_press.get(press_name, []))
            if count > 0:
                print(f"  {press_name}: {count}Í∞ú")

        # 3. Notion ÏóÖÎ°úÎìú
        print(f"\nUploading to Notion (Date: {date_str})...\n")

        # Í∏∞Ï°¥ Î∏îÎ°ù ÏÇ≠Ï†ú (3Î≤àÏß∏Î∂ÄÌÑ∞)
        delete_blocks_from_page(TODAY_HEADLINES_PAGE_ID, start_index=2)

        # ÏÉà Î∏îÎ°ù Ï∂îÍ∞Ä
        blocks = create_headline_blocks(date_str, headlines_by_press)
        append_blocks_to_page(TODAY_HEADLINES_PAGE_ID, blocks)

        print("\n" + "=" * 80)
        print("[SUCCESS] Upload completed!")
        print("=" * 80)

        db.close()
        return 0

    except Exception as e:
        print(f"\n[ERROR] {e}")
        import traceback
        traceback.print_exc()
        db.close()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
